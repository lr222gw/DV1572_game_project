#version 440
layout ( triangles) in;
layout ( triangle_strip, max_vertices = 6) out;

layout (location = 3) in vec2 texIn[];

in vec3 pos_gs;
in vec3 nor_gs;
in vec2 uv_gs;

out vec3 pos_fs;
out vec3 nor_fs;
out vec2 uv_fs;



void main(void){
	
	pos_fs	=	pos_gs;
	nor_fs	=	nor_gs;
	uv_fs	=	uv_gs;

	normal = normalize(cross((gl_in[1].gl_Position.xyz - gl_in[0].gl_Position.xyz),  (gl_in[2].gl_Position.xyz - gl_in[0].gl_Position.xyz)));

	gl_Position = gl_in[0].gl_Position;
	gs_color =  vs_color[0]; 
	gs_tex = texIn[0];
	fragPos = vec3(model * gl_in[0].gl_Position);
	EmitVertex();
	
	gl_Position = gl_in[1].gl_Position;
	//mySample = texture(texSampler, vec2(texIn[1].s, 1-texIn[1].r));
	gs_color = vs_color[1];
	gs_tex = texIn[1];
	fragPos = vec3(model * gl_in[1].gl_Position);

	 //Vet inte om detta är nödvändigt, men skickar med Normalen för varje vertex jag gör...
	normal = normal;
	EmitVertex();

	gl_Position = gl_in[2].gl_Position;
	//mySample = texture(texSampler, vec2(texIn[1].s, 1-texIn[1].r));
	//gs_color = mySample.rgb;// vs_color[2];
	gs_color = vs_color[2];
	gs_tex = texIn[2];
	fragPos = vec3(model * gl_in[2].gl_Position);
	normal = normal;
	EmitVertex();


	EndPrimitive();	
	
	 
	mat4 worldMatrix =  projection *   view  * (model  * rotation);

	vec4 offset = vec4(0.0f,0.0f,-0.75f, 0.0f);
	
	offset= worldMatrix * offset;


	vec4 curPos = gl_in[0].gl_Position;
	//curPos =  (worldMatrix * offset) +curPos;

	curPos = curPos + offset;

	gl_Position = curPos;
	gs_color = vs_color[0];
	gs_tex = texIn[0];
	fragPos = vec3( curPos);
	normal = normal;
	EmitVertex();
	
	curPos = gl_in[1].gl_Position;
	curPos = curPos + offset;
	//curPos =  (worldMatrix * offset) +curPos;

	gl_Position = curPos;
	gs_color = vs_color[1];
	gs_tex = texIn[1];
	fragPos = vec3(curPos);
	normal = normal;
	EmitVertex();

	curPos = gl_in[2].gl_Position;

	curPos = curPos + offset;
	//curPos =  (worldMatrix * offset) +curPos;

	gl_Position = curPos;
	gs_color = vs_color[2];
	gs_tex = texIn[2];
	fragPos = vec3(curPos);
	normal = normal;
	EmitVertex();

	EndPrimitive();	


}

